package controller

import (
	"fmt"
	core "k8s.io/api/core/v1"
	meta "k8s.io/apimachinery/pkg/apis/meta/v1"
	kutil "kmodules.xyz/client-go"
	clientutil "kmodules.xyz/client-go/client"
	coreutil "kmodules.xyz/client-go/core/v1"
	meta_util "kmodules.xyz/client-go/meta"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

var commonConf = `
	#
    # Extensions
    #
    druid.extensions.loadList=["druid-avro-extensions", "druid-s3-extensions", "druid-hdfs-storage", "druid-kafka-indexing-service", "druid-datasketches", "mysql-metadata-storage", "druid-basic-security"]
    #
    # Auth
    druid.auth.authenticatorChain=["basic"]
    druid.auth.authenticator.basic.type=basic
    #druid.auth.authenticator.basic.initialAdminPassword=abc
    druid.auth.authenticator.basic.initialAdminPassword={"type": "environment", "variable": "DRUID_ADMIN_PASSWORD"}
    druid.auth.authenticator.basic.initialInternalClientPassword=password2
    druid.auth.authenticator.basic.credentialsValidator.type=metadata
    druid.auth.authenticator.basic.skipOnFailure=false
    druid.auth.authenticator.basic.authorizerName=basic
    # Escalator
    druid.escalator.type=basic
    druid.escalator.internalClientUsername=druid_system
    druid.escalator.internalClientPassword=password2
    druid.escalator.authorizerName=basic
    druid.auth.authorizers=["basic"]
    druid.auth.authorizer.basic.type=basic
	#
	druid.sql.planner.useGroupingSetForExactDistinct=false
	druid.startup.logging.logProperties=false
`

var coordinatorsConf = `
	druid.coordinator.startDelay=PT30S
    druid.coordinator.period=PT30S
	druid.indexer.queue.startDelay=PT30S
	druid.manager.segments.pollDuration=PT1M
`

var brokersConf = `
    druid.broker.http.numConnections=5
    druid.server.http.numThreads=40
    druid.processing.buffer.sizeBytes=25000000
    druid.sql.enable=true
	#druid.broker.http.maxQueuedBytes=25MB
	druid.processing.numMergeBuffers=2
`

var historicalsConf = `
    druid.processing.buffer.sizeBytes=25000000
    druid.processing.numThreads=2
	druid.processing.numMergeBuffers=2

    # Segment storage
    druid.segmentCache.locations=[{"path":"/druid/data/segments","maxSize":10737418240}]

	# Query Cache
	druid.historical.cache.useCache=false
	druid.historical.cache.populateCache=false
	druid.cache.sizeInBytes=0
	# HTTP server threads
	druid.server.http.numThreads=10
`

var middleManagersConf = `
    druid.worker.capacity=1
    #druid.indexer.runner.javaOpts=-server -Xms128m -Xmx128m -XX:MaxDirectMemorySize=256m -Duser.timezone=UTC -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/druid/data/tmp -XX:+ExitOnOutOfMemoryError -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
    druid.indexer.task.baseTaskDir=/druid/data/baseTaskDir
    druid.server.http.numThreads=1
    druid.indexer.fork.property.druid.processing.buffer.sizeBytes=25000000
`

var overlordsConf = `
    druid.plaintextPort=8090
    druid.service=druid/overlord
	druid.indexer.storage.type=metadata
`

var routersConf = `
    druid.plaintextPort=8088
`

func (r *DruidReconciler) ensureConfigSecrets() error {
	config := map[string][]byte{
		"common.runtime.properties": []byte(commonConf),
		"coordinators.properties":   []byte(coordinatorsConf),
		"brokers.properties":        []byte(brokersConf),
		"historicals.properties":    []byte(historicalsConf),
		"middleManagers.properties": []byte(middleManagersConf),
		"routers.properties":        []byte(routersConf),
	}
	configSecret := &core.Secret{
		ObjectMeta: meta.ObjectMeta{
			Name:      r.db.ConfigSecretName(),
			Namespace: r.db.Namespace,
		},
	}
	v, err := clientutil.CreateOrPatch(r.ctx, r.KBClient, configSecret, func(obj client.Object, createOp bool) client.Object {
		secret := obj.(*core.Secret)
		secret.Labels = meta_util.OverwriteKeys(secret.Labels, r.db.OffShootLabels())
		if createOp {
			coreutil.EnsureOwnerReference(&secret.ObjectMeta, r.db.Owner())
		}
		secret.Data = config
		return secret
	})
	if err != nil {
		r.Log.Info("Failed to reconcile Configuration Secret")
		return err
	}

	if v == kutil.VerbCreated {
		r.Log.Info(fmt.Sprintf("Configuration Secret: %s/%s created", configSecret.GetNamespace(), configSecret.GetName()))
	}
	return nil
}
