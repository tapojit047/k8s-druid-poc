apiVersion: v1
data:
  common.runtime.properties: |
    #
    # Zookeeper-less Druid Cluster
    #
    druid.zk.service.enabled=false
    druid.discovery.type=k8s
    druid.discovery.k8s.clusterIdentifier=druid-it
    druid.serverview.type=http
    druid.coordinator.loadqueuepeon.type=http
    druid.indexer.runner.type=httpRemote
    # Metadata Store
    #druid.metadata.storage.type=derby
    #druid.metadata.storage.connector.connectURI=jdbc:derby://localhost:1527/var/druid/metadata.db;create=true
    #druid.metadata.storage.connector.host=localhost
    #druid.metadata.storage.connector.port=1527
    #druid.metadata.storage.connector.createTables=true
    #
    druid.metadata.storage.type=mysql
    druid.metadata.storage.connector.connectURI=jdbc:mysql://mysql-init-script:3306/druid
    druid.metadata.storage.connector.user=root
    #druid.metadata.storage.connector.password={"type": "environment", "variable": "DRUID_METADATA_STORAGE_PASSWORD"}
    druid.metadata.storage.connector.password=1.SXLr;)OeVi7I8r
    druid.metadata.storage.connector.createTables=true
    #
    # Deep Storage
    druid.storage.type=s3
    druid.storage.bucket=druid
    druid.storage.baseKey=druid/segments
    druid.s3.accessKey=minio
    druid.s3.secretKey=minio123
    druid.s3.protocol=http
    druid.s3.enabePathStyleAccess=true
    druid.s3.endpoint.signingRegion=us-east-1
    druid.s3.enablePathStyleAccess=true
    druid.s3.endpoint.url=http://myminio-hl.druid.svc.cluster.local:9000/
    #
    # Extensions
    #
    druid.extensions.loadList=["druid-avro-extensions", "druid-s3-extensions", "druid-hdfs-storage", "druid-kafka-indexing-service", "druid-datasketches", "mysql-metadata-storage", "druid-kubernetes-extensions", "druid-basic-security"]
    #
    # Service discovery
    #
    druid.selectors.indexing.serviceName=druid/overlord
    druid.selectors.coordinator.serviceName=druid/coordinator
    druid.indexer.logs.type=s3
    druid.indexer.logs.s3Bucket=druid
    druid.indexer.logs.s3Prefix=druid/indexing-logs
    druid.lookup.enableLookupSyncOnStartup=false
    # Auth
    druid.auth.authenticatorChain=["basic"]
    druid.auth.authenticator.basic.type=basic
    #druid.auth.authenticator.basic.initialAdminPassword=password1
    druid.auth.authenticator.basic.initialAdminPassword={"type": "environment", "variable": "DRUID_ADMIN_PASSWORD"}
    druid.auth.authenticator.basic.initialInternalClientPassword=password2
    druid.auth.authenticator.basic.credentialsValidator.type=metadata
    druid.auth.authenticator.basic.skipOnFailure=false
    druid.auth.authenticator.basic.authorizerName=basic
    # Escalator
    druid.escalator.type=basic
    druid.escalator.internalClientUsername=druid_system
    druid.escalator.internalClientPassword=password2
    druid.escalator.authorizerName=basic
    druid.auth.authorizers=["basic"]
    druid.auth.authorizer.basic.type=basic
kind: ConfigMap
metadata:
  labels:
    app: druid
    druid_cr: tiny-cluster
  name: tiny-cluster-druid-common-config
  namespace: druid